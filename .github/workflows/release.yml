name: Release Builds

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag name for the release (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  build-linux:
    name: Build Linux releases
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
      
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Install build dependencies
        run: |
          chmod +x scripts/install-build-deps.sh
          ./scripts/install-build-deps.sh
      
      - name: Build Linux releases
        run: |
          chmod +x scripts/build-linux.sh
          ./scripts/build-linux.sh
      
      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: podcast-tui-linux-releases
          path: releases/
          retention-days: 30

  build-windows:
    name: Build Windows releases
    runs-on: windows-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
      
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Install build dependencies
        shell: pwsh
        run: |
          ./scripts/install-build-deps.ps1
      
      - name: Build Windows releases
        shell: pwsh
        run: |
          ./scripts/build-releases-windows.ps1
      
      - name: Sign Windows binaries
        if: ${{ secrets.WINDOWS_CERT_BASE64 != '' || secrets.WINDOWS_CERT_THUMBPRINT != '' }}
        shell: pwsh
        env:
          WINDOWS_CERT_BASE64: ${{ secrets.WINDOWS_CERT_BASE64 }}
          WINDOWS_CERT_PASSWORD: ${{ secrets.WINDOWS_CERT_PASSWORD }}
          WINDOWS_CERT_THUMBPRINT: ${{ secrets.WINDOWS_CERT_THUMBPRINT }}
        run: |
          Write-Host "Code signing certificate detected, signing binaries..." -ForegroundColor Green
          
          # Find all built .exe files in releases directory
          $exeFiles = Get-ChildItem -Path "releases" -Recurse -Filter "*.exe"
          
          foreach ($exe in $exeFiles) {
            Write-Host "Signing: $($exe.FullName)" -ForegroundColor Cyan
            
            if ($env:WINDOWS_CERT_BASE64) {
              # Sign using base64-encoded certificate
              ./scripts/sign-windows-binary.ps1 `
                -BinaryPath $exe.FullName `
                -PfxBase64 $env:WINDOWS_CERT_BASE64 `
                -PfxPassword $env:WINDOWS_CERT_PASSWORD `
                -SkipIfNoCert
            } elseif ($env:WINDOWS_CERT_THUMBPRINT) {
              # Sign using certificate from store
              ./scripts/sign-windows-binary.ps1 `
                -BinaryPath $exe.FullName `
                -CertThumbprint $env:WINDOWS_CERT_THUMBPRINT `
                -SkipIfNoCert
            }
          }
          
          Write-Host "All binaries signed successfully!" -ForegroundColor Green
      
      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: podcast-tui-windows-releases
          path: releases/
          retention-days: 30

  create-release:
    name: Create GitHub Release
    needs: [build-linux, build-windows]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    permissions:
      contents: write
    
    steps:
      - name: Download Linux artifacts
        uses: actions/download-artifact@v4
        with:
          name: podcast-tui-linux-releases
          path: releases/
      
      - name: Download Windows artifacts
        uses: actions/download-artifact@v4
        with:
          name: podcast-tui-windows-releases
          path: releases/
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event_name == 'workflow_dispatch' && inputs.tag || github.ref_name }}
          files: |
            releases/**/*.zip
            releases/**/*.tar.gz
            releases/**/*.sha256
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test-builds:
    name: Test release artifacts
    needs: [build-linux, build-windows]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    
    steps:
      - name: Download Linux artifacts
        if: runner.os == 'Linux'
        uses: actions/download-artifact@v4
        with:
          name: podcast-tui-linux-releases
          path: releases/
      
      - name: Download Windows artifacts
        if: runner.os == 'Windows'
        uses: actions/download-artifact@v4
        with:
          name: podcast-tui-windows-releases
          path: releases/
      
      - name: Test Linux binary
        if: runner.os == 'Linux'
        run: |
          cd releases/v*/
          tar -xzf *linux-x86_64.tar.gz
          cd *linux-x86_64/
          chmod +x podcast-tui
          ./podcast-tui --version || true
      
      - name: Test Windows binary
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          cd releases/v*
          Expand-Archive -Path *windows-x86_64.zip -DestinationPath .
          cd *windows-x86_64
          ./podcast-tui.exe --version
